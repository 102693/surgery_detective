import asyncio
import logging
import os
from aiogram import Bot, Dispatcher, types
from aiogram.filters import CommandStart, Command
from aiogram.types import InlineKeyboardMarkup, FSInputFile, InlineKeyboardButton, CallbackQuery, InputFile
from config import BOT_TOKEN
from downloader import download_video

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# –ö–Ω–æ–ø–∫–∞ –¥–æ–Ω–∞—Ç–∞
donate_keyboard = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text="üí∞ –ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å", url="https://boosty.to/your_link")]
    ]
)

@dp.message(CommandStart())
async def start(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å —Å—Å—ã–ª–∫—É –Ω–∞ YouTube, –∏ —è –ø–æ–º–æ–≥—É —Å–∫–∞—á–∞—Ç—å –∞—É–¥–∏–æ –∏–ª–∏ –≤–∏–¥–µ–æ üéµüìπ", 
                         reply_markup=donate_keyboard)

@dp.message(Command("help"))
async def help_command(message: types.Message):
    await message.answer("–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ —Å YouTube, –∏ —è –ø—Ä–µ–¥–ª–æ–∂—É –≤–∞—Ä–∏–∞–Ω—Ç—ã —Å–∫–∞—á–∏–≤–∞–Ω–∏—è.")

@dp.message()
async def handle_url(message: types.Message):
    if "youtube.com" in message.text or "youtu.be" in message.text:
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="üéµ –°–∫–∞—á–∞—Ç—å MP3", callback_data=f"audio:{message.text}")],
                [InlineKeyboardButton(text="üìπ –°–∫–∞—á–∞—Ç—å MP4", callback_data=f"video:{message.text}")]
            ]
        )
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç:", reply_markup=keyboard)
    else:
        await message.answer("–≠—Ç–æ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ —Å—Å—ã–ª–∫—É —Å YouTube. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑!")

@dp.callback_query()
async def process_download(call: CallbackQuery):
    format_type, url = call.data.split(":", 1)
    await call.message.answer(f"‚è≥ –°–∫–∞—á–∏–≤–∞—é {format_type}...")
    
    try:
        file_path = await download_video(url, format_type)
        
        # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç FSInputFile –∏–∑ –ø—É—Ç–∏ –∫ —Ñ–∞–π–ª—É
        file_input = FSInputFile(file_path)
        
        if format_type == "audio":
            await call.message.answer_audio(file_input)
        else:
            await call.message.answer_video(file_input)
        
        # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
        os.remove(file_path)
    except Exception as e:
        await call.message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏.")
        logging.error(f"–û—à–∏–±–∫–∞: {e}")

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
